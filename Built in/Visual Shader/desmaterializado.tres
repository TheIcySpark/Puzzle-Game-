[gd_resource type="VisualShader" load_steps=18 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
default_input_values = [ 0, 0.0, 1, 6.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarFunc" id=2]
output_port_for_preview = 0
function = 29

[sub_resource type="VisualShaderNodeColorConstant" id=3]
output_port_for_preview = 0
constant = Color( 0, 0.482353, 0.120588, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=4]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=5]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarFunc" id=6]
function = 31

[sub_resource type="VisualShaderNodeScalarOp" id=7]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.05 ]
operator = 1

[sub_resource type="VisualShaderNodeTexture" id=8]
source = 2

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 0.1 ]

[sub_resource type="OpenSimplexNoise" id=10]

[sub_resource type="NoiseTexture" id=11]
noise = SubResource( 10 )

[sub_resource type="VisualShaderNodeTexture" id=12]
texture = SubResource( 11 )

[sub_resource type="VisualShaderNodeVectorOp" id=13]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeInput" id=14]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=15]
function = 0

[sub_resource type="VisualShaderNodeScalarFunc" id=16]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShaderNodeScalarOp" id=17]
output_port_for_preview = 0
operator = 2

[resource]
code = "shader_type canvas_item;
render_mode blend_add;

uniform sampler2D tex_frg_3;



void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Input:5
	float n_out5p0 = TIME;

// ScalarFunc:6
	float n_out6p0 = sin(n_out5p0);

// ScalarOp:11
	float n_in11p1 = 6.00000;
	float n_out11p0 = n_out6p0 / n_in11p1;

// ScalarOp:20
	float n_in20p1 = 0.10000;
	float n_out20p0 = n_out11p0 + n_in20p1;

// VectorOp:4
	vec3 n_out4p0 = n_out3p0 + vec3(n_out20p0);

// ScalarOp:19
	float n_in19p1 = 0.05000;
	float n_out19p0 = dot(n_out4p0, vec3(0.333333, 0.333333, 0.333333)) - n_in19p1;

// ScalarFunc:18
	float n_out18p0 = 1.0 - n_out19p0;

// ScalarFunc:13
	float n_out13p0 = roundEven(n_out18p0);

// Color:14
	vec3 n_out14p0 = vec3(0.000000, 0.482353, 0.120588);
	float n_out14p1 = 1.000000;

// VectorOp:15
	vec3 n_out15p0 = vec3(n_out13p0) * n_out14p0;

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out2p0 = _tex_read.rgb;
		n_out2p1 = _tex_read.a;
	}

// VectorOp:16
	vec3 n_out16p0 = n_out15p0 + n_out2p0;

// ScalarFunc:7
	float n_out7p0 = round(dot(n_out4p0, vec3(0.333333, 0.333333, 0.333333)));

// ScalarOp:8
	float n_out8p0 = n_out2p1 * n_out7p0;

// Output:0
	COLOR.rgb = n_out16p0;
	COLOR.a = n_out8p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -957, 453 )
mode = 1
modes/blend = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 980, 280 )
nodes/fragment/2/node = SubResource( 8 )
nodes/fragment/2/position = Vector2( 40, 320 )
nodes/fragment/3/node = SubResource( 12 )
nodes/fragment/3/position = Vector2( -640, 300 )
nodes/fragment/4/node = SubResource( 13 )
nodes/fragment/4/position = Vector2( -240, 500 )
nodes/fragment/5/node = SubResource( 14 )
nodes/fragment/5/position = Vector2( -1180, 580 )
nodes/fragment/6/node = SubResource( 15 )
nodes/fragment/6/position = Vector2( -960, 580 )
nodes/fragment/7/node = SubResource( 16 )
nodes/fragment/7/position = Vector2( -20, 480 )
nodes/fragment/8/node = SubResource( 17 )
nodes/fragment/8/position = Vector2( 640, 320 )
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( -740, 560 )
nodes/fragment/13/node = SubResource( 2 )
nodes/fragment/13/position = Vector2( 160, -100 )
nodes/fragment/14/node = SubResource( 3 )
nodes/fragment/14/position = Vector2( 240, 100 )
nodes/fragment/15/node = SubResource( 4 )
nodes/fragment/15/position = Vector2( 480, 60 )
nodes/fragment/16/node = SubResource( 5 )
nodes/fragment/16/position = Vector2( 720, 60 )
nodes/fragment/18/node = SubResource( 6 )
nodes/fragment/18/position = Vector2( -260, -80 )
nodes/fragment/19/node = SubResource( 7 )
nodes/fragment/19/position = Vector2( -480, -80 )
nodes/fragment/20/node = SubResource( 9 )
nodes/fragment/20/position = Vector2( -500, 580 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 5, 0, 6, 0, 4, 0, 7, 0, 6, 0, 11, 0, 16, 0, 0, 0, 14, 0, 15, 1, 7, 0, 8, 1, 8, 0, 0, 1, 13, 0, 15, 0, 4, 0, 19, 0, 19, 0, 18, 0, 18, 0, 13, 0, 15, 0, 16, 0, 2, 0, 16, 1, 2, 1, 8, 0, 11, 0, 20, 0, 20, 0, 4, 1 )
